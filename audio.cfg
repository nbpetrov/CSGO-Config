//                                              __________
//_____________________________________________/- AUDIO -/
//¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯
// GENERAL
snd_mixahead                    						0.025      				// def. 0.025  - Soundbuffer size/length - Sounds are played faster for client (faster audio processing, too low value can cause problems for "bad" audio setups)
snd_mix_async											1						// def. 1	   - Sets sound to get mixed asynchronously on a different thread
snd_pitchquality										1						// def. 1      - Sound pitch quality
snd_mute_losefocus                  					0         				// def. 1      - Mute Ingamesound when tabbing out of the Game, 0 = CS:GO sounds in Windows
volume                          						0.5       				// def. 1      - Sound volume
voice_positional 										1 						// def. 0      - When this setting is enabled, in-game voice audio will be played from the position the player is standing at.
//
// 3D and HRTF
snd_hwcompat 											0 						// def. 0      - 0 = Advanced 3D Audio Processing (HRTF & Occlusion) Enabled  1 = Advanced 3D Audio Processing disabled for compatibility with audio hardware (if you use artificial 3rd party 3D/surround sound solutions).
snd_hrtf_distance_behind								100						// def. 100    - HRTF calculations will calculate the player as being this far behind the camera
//
// HEADPHONES
snd_front_headphone_position            				53.2        			// def. 90	   - Specifies the position (in degrees) of the virtual front left/right headphones / 43.2 (5:4 resolution), 45.0 (4:3 resolution), 50.2 (16:10 resolution), or 53.2 (16:9 resolution)
snd_rear_headphone_position             				90       				// def. 90     - Specifies the position (in degrees) of the virtual rear left/right headphones.
snd_headphone_pan_exponent          					1.2     				// def. 1      - Specifies the exponent for the pan xfade from phone to phone if the 'exp' pan law is being used.
snd_headphone_pan_radial_weight         				0.5     				// def. 1      - Apply cos(angle) * weight before pan law
//
// STEREO SPEAKERS 
snd_front_stereo_speaker_position 						60						// def. 90     - Specifies the position (in degrees) of the virtual front left/right speakers.
snd_rear_stereo_speaker_position 						90						// def. 90     - Specifies the position (in degrees) of the virtual rear left/right speakers.
snd_stereo_speaker_pan_exponent 						1.4						// def. 1.5    - Specifies the exponent for the pan xfade from speaker to speaker if the 'exp' pan law is being used.
snd_stereo_speaker_pan_radial_weight 					0.5						// def. 0      - Apply cos(angle) * weight before pan law
//
// SURROUND SOUND
snd_front_surround_speaker_position 					45						// def. 45     - Specifies the position (in degrees) of the virtual front left/right speakers.
snd_rear_surround_speaker_position 						135						// def. 135    - Specifies the position (in degrees) of the virtual rear left/right speakers.
snd_surround_speaker_pan_exponent 						1.5 					// def. 1.5    - Specifies the exponent for the pan xfade from speaker to speaker if the 'exp' pan law is being used.
snd_surround_speaker_pan_radial_weight 					0 						// def. 0      - Apply cos(angle) * weight before pan law
//
// MUSIC 
snd_deathcamera_volume              					0     					// def. 1      - Relative volume of the death camera music.
snd_mapobjective_volume             					0    					// def. 1      - Relative volume of map objective music.
snd_menumusic_volume            						0     					// def. 1      - Relative volume of the main menu music.
snd_roundend_volume                 					0     					// def. 1      - Relative volume of round end music.
snd_roundstart_volume               					0     					// def. 1      - Relative volume of round start music.
snd_tensecondwarning_volume         					0.3    	 				// def. 1      - Relative volume of ten second warning music.
snd_musicvolume_multiplier_inoverlay        			0     					// def. 0      - Music volume multiplier when Steam Overlay is active
snd_mvp_volume 											0.2						// def. 1.0    - Relative volume of the MVP music.
//
// VOICE SETTINGS 
voice_system_enable										1 						// def. 1      - Toggle voice system.
voice_enable                    						1     					// def. 1      - Toggle voice transmit and receive.
voice_scale                         					0   	 				// def. 0      - Overall volume of voice over IP (Min: 0 - Max: 1)
voice_caster_enable             						0     					// def. 0      - Toggle voice transmit and receive for casters. 0 = no caster, account number of caster to enable.
voice_caster_scale              						0.7       				// def. 1      - Volume of GOTV casters voice.
voice_inputfromfile             						0     					// def. 0      - Get voice input from 'voice_input.wav' rather than from the microphone.(0 = use microphone)
voice_loopback              							0     					// def. 0      - Loopback your voice to headphones/speakers
voice_mixer_boost               						0     					// def. 0      - Enable microphone boost for your microphone in Windows       
voice_mixer_mute                						0     					// def. 0      - Enable/Disable microphone mute in windows    
voice_mixer_volume          							-1       				// def. 1      - Set the volume for your microphone in Windows (0.1 = 10% - 1 = 100% | -1 = Disabled)
voice_modenable                			  				1     					// def. 1      - Enable/disable voice in this mod.
voice_recordtofile              						0         				// def. 1      - Record mic data and decompressed voice data into 'voice_micdata.wav' and 'voice_decompressed.wav'
voice_threshold                 						2000      				// def. 4000   - At what mic level to start picking up sound (for non-push-to-talk setup)
//
// OTHER
dsp_enhance_stereo                  					0         				// def. 0      - Enhanced (Software 3D) Stereo Sound (use with windows_speaker_config 1 or 4)
snd_ducking_off                 						1     					// def. 1      - Lower game sounds when somebody is speaking (0 = Activate feature, 4 commands below)
snd_duckerreleasetime               					2.5       				// def. 2      - How long before volume goes back to normal
snd_duckerthreshold                 					0.15     				// def. 0      - How long before the volume starts going lower
snd_ducktovolume                						0.7       				// def. 0      - Volume to lower the sound to
snd_prefetch_common             						1     					// def. 1      - Prefetch common sounds from directories specified in scripts/sound_prefetch.txt (Less audio files loading while playing)
suitvolume                  			  				0     					// def. 0.25   - Suitvolume (has no function, but useless sounds set to 0)
